# Kernel sysctl configuration file for Red Hat Linux
#
# For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and
# sysctl.conf(5) for more details.

# Controls IP packet forwarding
net.ipv4.ip_forward = 0

# Controls source route verification
net.ipv4.conf.default.rp_filter = 1

# Do not accept source routing
net.ipv4.conf.default.accept_source_route = 0

# Controls the System Request debugging functionality of the kernel
kernel.sysrq = 0

# Controls whether core dumps will append the PID to the core filename
# Useful for debugging multi-threaded applications
kernel.core_uses_pid = 1

# Controls the use of TCP syncookies
net.ipv4.tcp_syncookies = 1

# Controls the maximum size of a message, in bytes
kernel.msgmnb = 65536

# Controls the default maxmimum size of a mesage queue
kernel.msgmax = 65536

# Controls the maximum shared segment size, in bytes
kernel.shmmax = 4294967295

# Controls the maximum number of shared memory segments, in pages
kernel.shmall = 268435456

#Disabling the TCP options reduces the overhead of each TCP packet and might
#help to get the last few percent of performance out of the server. Be aware
#that disabling these options most likely decreases performance for high-latency
#and lossy links.
#net.ipv4.tcp_sack = 0
#net.ipv4.tcp_timestamps = 0

#Increasing the TCP send and receive buffers will increase the performance a lot
#if (and only if) you have a lot of large files to send.
# tcp_wmem default is 4k 16k 128k
net.core.wmem_max = 8388608
net.ipv4.tcp_wmem = 4096 131072 8388608

#If you have a lot of large file uploads, increasing the receive buffers will help.
# tcp_rmem default is 8k 87380 87380*2
net.core.rmem_max = 8388608
net.ipv4.tcp_rmem = 8192 87380 8388608

# These ensure that TIME_WAIT ports either get reused or closed fast.
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1

# Maximal number of remembered connection requests, which are still did not
# receive an acknowledgment from connecting client.  Default value is 1024 for
# systems with more than 128Mb of memory,
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 2

# Set maximum number of packets, queued on the INPUT side, when the interface
# receives packets faster than kernel can process them.
net.core.netdev_max_backlog = 5000

# you shouldn’t be using conntrack on a heavily loaded server anyway, but these are
# suitably high for our uses, insuring that if conntrack gets turned on, the box doesn’t die
#net.ipv4.ip_conntrack_max = 1048576
#net.nf_conntrack_max = 1048576
